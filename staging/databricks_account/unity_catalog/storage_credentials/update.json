{
  "verb": "put",
  "path": "/api/2.0/accounts/{account_id}/metastores/{metastore_id}/storage-credentials/{storage_credential_name}",
  "description": "Updates a storage credential on the metastore.",
  "parameters": {
    "account_id": {
      "in": "path",
      "required": true,
      "type": "uuid",
      "description": "."
    },
    "metastore_id": {
      "in": "path",
      "required": true,
      "type": "uuid",
      "description": "Unity Catalog metastore ID"
    },
    "storage_credential_name": {
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Name of the storage credential."
    }
  },
  "requestBody": {
    "properties": {
      "credential_info": {
        "description": "object"
      },
      "comment": {
        "type": "string",
        "description": "Comment associated with the credential."
      },
      "read_only": {
        "type": "boolean",
        "description": "Whether the storage credential is only usable for read operations."
      },
      "owner": {
        "type": "string",
        "description": "Username of current owner of credential."
      },
      "aws_iam_role": {
        "description": "The AWS IAM role configuration."
      },
      "isolation_mode": {
        "type": "string",
        "enum": [
          "ISOLATION_MODE_OPEN",
          "ISOLATION_MODE_ISOLATED"
        ],
        "description": "Whether the current securable is accessible from all workspaces or a specific set of workspaces."
      },
      "new_name": {
        "type": "string",
        "description": "New name for the storage credential."
      },
      "skip_validation": {
        "type": "boolean",
        "description": "Default"
      },
      "false": {
        "description": "Supplying true to this argument skips validation of the updated credential."
      },
      "force": {
        "type": "boolean",
        "description": "Force update even if there are dependent external locations or external tables."
      }
    }
  },
  "responses": {
    "201": {
      "credential_info": {
        "description": "object"
      },
      "name": {
        "type": "string",
        "description": "The credential name. The name must be unique within the metastore."
      },
      "aws_iam_role": {
        "description": "The AWS IAM role configuration."
      },
      "comment": {
        "type": "string",
        "description": "Comment associated with the credential."
      },
      "read_only": {
        "type": "boolean",
        "description": "Whether the storage credential is only usable for read operations."
      },
      "owner": {
        "type": "string",
        "description": "Username of current owner of credential."
      },
      "full_name": {
        "type": "string",
        "description": "The full name of the credential."
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the credential."
      },
      "metastore_id": {
        "type": "string",
        "description": "Unique identifier of parent metastore."
      },
      "created_at": {
        "description": "Time at which this Credential was created, in epoch milliseconds."
      },
      "created_by": {
        "type": "string",
        "description": "Username of credential creator."
      },
      "updated_at": {
        "description": "Time at which this credential was last modified, in epoch milliseconds."
      },
      "updated_by": {
        "type": "string",
        "description": "Username of user who last modified the credential."
      },
      "used_for_managed_storage": {
        "type": "boolean",
        "description": "Whether this credential is the current metastore's root storage credential."
      },
      "isolation_mode": {
        "type": "string",
        "description": "Enum:"
      },
      "ISOLATION_MODE_OPEN | ISOLATION_MODE_ISOLATED": {
        "description": "Whether the current securable is accessible from all workspaces or a specific set of workspaces."
      }
    },
    "400": {
      "error_code": "BAD_REQUEST",
      "description": "Request is invalid."
    },
    "401": {
      "error_code": "UNAUTHORIZED",
      "description": "The request does not have valid authentication credentials for the operation."
    },
    "404": {
      "error_code": "NOT_FOUND",
      "description": "Operation was performed on a resource that does not exist."
    },
    "500": {
      "error_code": "INTERNAL_SERVER_ERROR",
      "description": "Internal error."
    }
  }
}